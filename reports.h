#pragma once

//https://learn.microsoft.com/en-us/windows-hardware/drivers/hid/top-level-collections
//yes, you can stack them.

// AUTO-GENERATED by WaratahCmd.exe (https://github.com/microsoft/hidtools)

// HID Usage Tables: 1.5.0
// Descriptor size: 50 (bytes)
// +----------+-------+-------------------+
// | ReportId | Kind  | ReportSizeInBytes |
// +----------+-------+-------------------+
// |        1 | Input |                 3 |
// +----------+-------+-------------------+
uint8_t hidReportDescriptor[] = 
{
    0x05, 0x01,    // UsagePage(Generic Desktop[0x0001])
    0x09, 0x02,    // UsageId(Mouse[0x0002])
    0xA1, 0x01,    // Collection(Application)
    0x85, 0x01,    //     ReportId(1)
    0x09, 0x01,    //     UsageId(Pointer[0x0001])
    0xA1, 0x00,    //     Collection(Physical)
    0x09, 0x30,    //         UsageId(X[0x0030])
    0x09, 0x31,    //         UsageId(Y[0x0031])
    0x15, 0x80,    //         LogicalMinimum(-128)
    0x25, 0x7F,    //         LogicalMaximum(127)
    0x95, 0x02,    //         ReportCount(2)
    0x75, 0x08,    //         ReportSize(8)
    0x81, 0x06,    //         Input(Data, Variable, Relative, NoWrap, Linear, PreferredState, NoNullPosition, BitField)
    0x05, 0x09,    //         UsagePage(Button[0x0009])
    0x19, 0x01,    //         UsageIdMin(Button 1[0x0001])
    0x29, 0x03,    //         UsageIdMax(Button 3[0x0003])
    0x15, 0x00,    //         LogicalMinimum(0)
    0x25, 0x01,    //         LogicalMaximum(1)
    0x95, 0x03,    //         ReportCount(3)
    0x75, 0x01,    //         ReportSize(1)
    0x81, 0x02,    //         Input(Data, Variable, Absolute, NoWrap, Linear, PreferredState, NoNullPosition, BitField)
    0xC0,          //     EndCollection()
    0x95, 0x01,    //     ReportCount(1) //PADDING
    0x75, 0x05,    //     ReportSize(5)  //PADDING
    0x81, 0x03,    //     Input(Constant, Variable, Absolute, NoWrap, Linear, PreferredState, NoNullPosition, BitField)
    0xC0,          // EndCollection()
}; //3 bytes in total (or 4?)

// +----------+-------+-------------------+
// | ReportId | Kind  | ReportSizeInBytes |
// +----------+-------+-------------------+
// |        1 | Input |                14 |
// +----------+-------+-------------------+
uint8_t originalGamepadReportDescriptor[] = { //the hidapi github has some good tools and i used the hidtest.exe to get the report descriptor for the raphnet controller
    0x05, 0x01,        // Usage Page (Generic Desktop Ctrls)
    0x09, 0x05,        // Usage (Game Pad)
    0xA1, 0x01,        // Collection (Application)
    0x09, 0x01,        //   Usage (Pointer)
    0xA1, 0x00,        //   Collection (Physical)
    0x85, 0x01,        //     Report ID (1)
    0x09, 0x30,        //     Usage (X)
    0x09, 0x31,        //     Usage (Y)
    0x09, 0x33,        //     Usage (Rx)
    0x09, 0x34,        //     Usage (Ry)
    0x09, 0x35,        //     Usage (Rz)
    0x09, 0x32,        //     Usage (Z)
    0x15, 0x00,        //     Logical Minimum (0)
    0x26, 0x00, 0x7D,  //     Logical Maximum (32000)
    0x75, 0x10,        //     Report Size (16)
    0x95, 0x06,        //     Report Count (6)
    0x81, 0x02,        //     Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    0xC0,              //   End Collection
    0x09, 0x00,        //   Usage (Undefined)
    0xA1, 0x00,        //   Collection (Physical)
    0x05, 0x09,        //     Usage Page (Button)
    0x19, 0x01,        //     Usage Minimum (0x01)
    0x29, 0x10,        //     Usage Maximum (0x10)
    0x15, 0x00,        //     Logical Minimum (0)
    0x25, 0x01,        //     Logical Maximum (1)
    0x75, 0x01,        //     Report Size (1)
    0x95, 0x10,        //     Report Count (16)
    0x81, 0x02,        //     Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    0xC0,              //   End Collection
    0xC0,              // End Collection
}; //14 total bytes!

uint8_t fullReportDescriptor[] = {
    //gamepad
    0x05, 0x01,        // Usage Page (Generic Desktop Ctrls)
    0x09, 0x05,        // Usage (Game Pad)
    0xA1, 0x01,        // Collection (Application)
    0x09, 0x01,        //   Usage (Pointer)
    0xA1, 0x00,        //   Collection (Physical)
    0x85, 0x01,        //     Report ID (1)
    0x09, 0x30,        //     Usage (X)
    0x09, 0x31,        //     Usage (Y)
    0x09, 0x33,        //     Usage (Rx)
    0x09, 0x34,        //     Usage (Ry)
    0x09, 0x35,        //     Usage (Rz)
    0x09, 0x32,        //     Usage (Z)
    0x15, 0x00,        //     Logical Minimum (0)
    0x26, 0x00, 0x7D,  //     Logical Maximum (32000)
    0x75, 0x10,        //     Report Size (16)
    0x95, 0x06,        //     Report Count (6)
    0x81, 0x02,        //     Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    0xC0,              //   End Collection
    0x09, 0x00,        //   Usage (Undefined)
    0xA1, 0x00,        //   Collection (Physical)
    0x05, 0x09,        //     Usage Page (Button)
    0x19, 0x01,        //     Usage Minimum (0x01)
    0x29, 0x10,        //     Usage Maximum (0x10)
    0x15, 0x00,        //     Logical Minimum (0)
    0x25, 0x01,        //     Logical Maximum (1)
    0x75, 0x01,        //     Report Size (1)
    0x95, 0x10,        //     Report Count (16)
    0x81, 0x02,        //     Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    0xC0,              //   End Collection
    0xC0,              // End Collection

    //mouse
    0x05, 0x01,        // UsagePage(Generic Desktop[0x0001])
    0x09, 0x02,        // UsageId(Mouse[0x0002])
    0xA1, 0x01,        // Collection(Application)
    0x85, 0x02,        //     ReportId(2)
    0x09, 0x01,        //     UsageId(Pointer[0x0001])
    0xA1, 0x00,        //     Collection(Physical)
    0x09, 0x30,        //         UsageId(X[0x0030])
    0x09, 0x31,        //         UsageId(Y[0x0031])
    0x15, 0x80,        //         LogicalMinimum(-128)
    0x25, 0x7F,        //         LogicalMaximum(127)
    0x95, 0x02,        //         ReportCount(2)
    0x75, 0x08,        //         ReportSize(8)
    0x81, 0x06,        //         Input(Data, Variable, Relative, NoWrap, Linear, PreferredState, NoNullPosition, BitField)
    0x05, 0x09,        //         UsagePage(Button[0x0009])
    0x19, 0x01,        //         UsageIdMin(Button 1[0x0001])
    0x29, 0x03,        //         UsageIdMax(Button 3[0x0003])
    0x15, 0x00,        //         LogicalMinimum(0)
    0x25, 0x01,        //         LogicalMaximum(1)
    0x95, 0x03,        //         ReportCount(3)
    0x75, 0x01,        //         ReportSize(1)
    0x81, 0x02,        //         Input(Data, Variable, Absolute, NoWrap, Linear, PreferredState, NoNullPosition, BitField)
    0xC0,              //     EndCollection()
    0x95, 0x01,        //     ReportCount(1) //PADDING
    0x75, 0x05,        //     ReportSize(5)  //PADDING
    0x81, 0x03,        //     Input(Constant, Variable, Absolute, NoWrap, Linear, PreferredState, NoNullPosition, BitField)
    0xC0,              // EndCollection()

    //keyboard
    0x05, 0x01,        // Usage Page (Generic Desktop Ctrls)
    0x09, 0x06,        // Usage (Keyboard)
    0xA1, 0x01,        // Collection (Application)
    0x85, 0x03,        //   ReportId(3)
    0x05, 0x07,        //   Usage Page (Kbrd/Keypad)
    0x19, 0xE0,        //   Usage Minimum (0xE0)
    0x29, 0xE7,        //   Usage Maximum (0xE7)
    0x15, 0x00,        //   Logical Minimum (0)
    0x25, 0x01,        //   Logical Maximum (1)
    0x75, 0x01,        //   Report Size (1)
    0x95, 0x08,        //   Report Count (8)
    0x81, 0x02,        //   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) //modifier keys
    0x75, 0x08,        //   Report Size (8)
    0x95, 0x01,        //   Report Count (1)
    0x81, 0x03,        //   Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) //const padding???
    0x19, 0x00,        //   Usage Minimum (0x00)
    0x29, 0xA4,        //   Usage Maximum (0xA4)
    0x15, 0x00,        //   Logical Minimum (0)
    0x26, 0xA4, 0x00,  //   Logical Maximum (164)
    0x75, 0x08,        //   Report Size (8)
    0x95, 0x06,        //   Report Count (6)
    0x81, 0x00,        //   Input (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position) //we're sending an array of BYTE[6] to represent the keys that are currently pressed. with this method, we can only press 6 keys at a time and each key is represented by one byte in the array!
    0xC0,              // End Collection
};

#define SENSITIVITY 5.f

//#pragma pack(push,1)
//
//#define HID_REPORT_INPUT1_ID (1)
//struct HidReportInput1
//{
//    uint8_t ReportId;// = HID_REPORT_INPUT1_ID;
//    uint8_t Payload[3];
//};
//
//#pragma pack(pop)